import random

from loguru import logger

import asyncio
import aioconsole

import curses

async def sleep(sleep_from, sleep_to):
    delay = random.randint(sleep_from, sleep_to)
    print(f"üí§ Sleep {delay} s. Press Enter to interrupt.")

    def handle_input(stdscr):
        curses.noecho()  # –û—Ç–∫–ª—é—á–∞–µ–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤–≤–æ–¥–∏–º—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤
        curses.cbreak()  # –†–µ–∂–∏–º –Ω–µ–º–µ–¥–ª–µ–Ω–Ω–æ–≥–æ —á—Ç–µ–Ω–∏—è –≤–≤–æ–¥–∞
        stdscr.keypad(True)  # –í–∫–ª—é—á–∞–µ–º –ø–æ–¥–¥–µ—Ä–∂–∫—É —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã—Ö –∫–ª–∞–≤–∏—à

        while True:
            key = stdscr.getch()
            if key == 10:  # –ö–æ–¥ –∫–ª–∞–≤–∏—à–∏ Enter
                return True

    async def sleep_task():
        try:
            for _ in range(delay):
                await asyncio.sleep(1)
        except asyncio.CancelledError:
            print("Sleep interrupted!")

    # –ó–∞–ø—É—Å–∫–∞–µ–º –∑–∞–¥–∞—á–∏ –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ
    loop = asyncio.get_event_loop()
    with curses.initscr() as stdscr:  # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è ncurses
        done, pending = await asyncio.wait(
            [sleep_task(), loop.run_in_executor(None, handle_input, stdscr)],
            return_when=asyncio.FIRST_COMPLETED
        )

    # –ü—Ä–µ—Ä—ã–≤–∞–µ–º sleep_task, –µ—Å–ª–∏ –æ–Ω–∞ –µ—â–µ –Ω–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∞
    for task in pending:
        task.cancel()

"""
async def sleep(sleep_from, sleep_to, key='q'):
    delay = random.randint(sleep_from, sleep_to)
    print(f"üí§ Sleep {delay} s. Press '{key}' to interrupt.")

    async def wait_for_key():
        while True:
            key_pressed = await aioconsole.ainput()
            if key_pressed == key:
                return True

    async def sleep_task():
        try:
            for _ in range(delay):
                await asyncio.sleep(1)
        except asyncio.CancelledError:
            print("Sleep interrupted!")

    # –ó–∞–ø—É—Å–∫–∞–µ–º –∑–∞–¥–∞—á–∏ –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ
    done, pending = await asyncio.wait(
        [sleep_task(), wait_for_key()],
        return_when=asyncio.FIRST_COMPLETED
    )

    # –ü—Ä–µ—Ä—ã–≤–∞–µ–º sleep_task, –µ—Å–ª–∏ –æ–Ω–∞ –µ—â–µ –Ω–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∞
    for task in pending:
        task.cancel()

"""
