import asyncio
import random

from getch import getch

async def sleep(sleep_from, sleep_to, key='q'):
    delay = random.randint(sleep_from, sleep_to)
    print(f"üí§ Sleep {delay} s. Press '{key}' to interrupt.")

    async def wait_for_key():
        try:
            # –û–∂–∏–¥–∞–µ–º –Ω–∞–∂–∞—Ç–∏—è –∫–ª–∞–≤–∏—à–∏ —Å —Ç–∞–π–º–∞—É—Ç–æ–º
            key_pressed = await asyncio.wait_for(asyncio.to_thread(getch), timeout=delay)  
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–∞–∂–∞—Ç–∞ –ª–∏ –Ω—É–∂–Ω–∞—è –∫–ª–∞–≤–∏—à–∞
            if key_pressed == key:
                return True  # –ü—Ä–µ—Ä—ã–≤–∞–µ–º sleep
            else:
                return False  # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –¥—Ä—É–≥–∏–µ –∫–ª–∞–≤–∏—à–∏
        except asyncio.TimeoutError:
            return False  # –¢–∞–π–º–∞—É—Ç, –∫–ª–∞–≤–∏—à–∞ –Ω–µ –Ω–∞–∂–∞—Ç–∞

    async def sleep_task():
        try:
            for _ in range(delay):
                await asyncio.sleep(1)
        except asyncio.CancelledError:
            print("Sleep interrupted!")

    # –°–æ–∑–¥–∞—ë–º –∑–∞–¥–∞—á–∏
    sleep_task = asyncio.create_task(sleep_task())
    wait_for_key_task = asyncio.create_task(wait_for_key())

    # –ó–∞–ø—É—Å–∫–∞–µ–º –∑–∞–¥–∞—á–∏ –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ –∏ –æ–∂–∏–¥–∞–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –ª—é–±–æ–π –∏–∑ –Ω–∏—Ö
    done, pending = await asyncio.wait(
        [sleep_task, wait_for_key_task],
        return_when=asyncio.FIRST_COMPLETED
    )

    # –ü—Ä–µ—Ä—ã–≤–∞–µ–º sleep_task, –µ—Å–ª–∏ –æ–Ω–∞ –µ—â–µ –Ω–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∞
    for task in pending:
        task.cancel()
